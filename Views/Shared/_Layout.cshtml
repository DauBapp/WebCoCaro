@using Microsoft.AspNetCore.Identity
@inject SignInManager<Web_chơi_cờ_Caro.Data.ApplicationUser> SignInManager

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"] - Web_cờ_caro</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/site.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
        
        body {
            background: linear-gradient(135deg, #f7e9c4 0%, #e6c07b 100%);
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }
        
        .caro-logo {
            width: 40px;
            height: 40px;
            background: #d4a24c;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 1.5rem;
            color: #fff;
            margin-right: 10px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
        }
        
        .main-content {
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: flex-start;
            gap: 40px;
            margin-top: 40px;
        }
        
        .caro-board-container {
            background: #f5d88c;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            padding: 30px 30px 30px 30px;
        }
        
        .player-info {
            background: #fffbe6;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            padding: 24px;
            min-width: 260px;
        }
        
        main {
            flex: 1;
            padding: 20px 0;
        }
        
        .footer {
            background: #e6c07b;
            padding: 15px 0;
            margin-top: auto;
        }

        /* Modal thông báo chiến thắng mới */
        .victory-modal {
            display: none;
            position: fixed;
            z-index: 10000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(5px);
        }

        .victory-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 40px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            max-width: 400px;
            width: 90%;
            animation: modalSlideIn 0.4s ease-out;
        }

        .victory-icon {
            font-size: 60px;
            margin-bottom: 20px;
            display: block;
        }

        .victory-title {
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 15px;
            color: #333;
        }

        .victory-message {
            font-size: 16px;
            color: #666;
            margin-bottom: 30px;
            line-height: 1.5;
        }

        .victory-button {
            background: #d4a24c;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 25px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .victory-button:hover {
            background: #e6c07b;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(212, 162, 76, 0.4);
        }

        @@keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translate(-50%, -60%);
            }
            to {
                opacity: 1;
                transform: translate(-50%, -50%);
            }
        }

        .victory-modal.show {
            display: block;
        }
    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-lg navbar-dark" style="background: #d4a24c;">
            <div class="container-fluid">
                <a class="navbar-brand d-flex align-items-center" href="@Url.Action("Index", "Home")">
                    <span class="caro-logo">C</span>
                    <span style="font-weight:bold; color:#fffbe6;">Web Cờ Caro</span>
                </a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("Index", "Home")">Home</a></li>
                        <li class="nav-item"><a class="nav-link" href="@Url.Action("Multiplayer", "Home")">Chơi Online</a></li>
                        <li class="nav-item"><a class="nav-link" href="#">Chơi cờ</a></li>
                        <li class="nav-item"><a class="nav-link" href="#">Xếp hạng</a></li>
                    </ul>
                    <partial name="_LoginPartial" />
                </div>
            </div>
        </nav>
    </header>
    
    <!-- Modal thông báo chiến thắng mới -->
    <div id="victoryModal" class="victory-modal">
        <div class="victory-content">
            <span class="victory-icon" id="victoryIcon">🏆</span>
            <div class="victory-title" id="victoryTitle">Chiến thắng!</div>
            <div class="victory-message" id="victoryMessage">Chúc mừng bạn đã chiến thắng!</div>
            <button class="victory-button" onclick="closeVictoryModal()">Tiếp tục</button>
        </div>
    </div>
    
    <main class="container">
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark" style="background: linear-gradient(135deg, #d4a24c 0%, #e6c07b 100%);">
        <div class="container">
            <a class="navbar-brand d-flex align-items-center" asp-controller="Home" asp-action="Index">
                <div class="caro-logo">♟️</div>
                <span class="fw-bold">Web Cờ Caro</span>
            </a>
            
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" asp-controller="Home" asp-action="Index">
                            <i class="fas fa-home me-1"></i>Trang chủ
                        </a>
                    </li>
                    @if (SignInManager.IsSignedIn(User))
                    {
                        <li class="nav-item">
                            <a class="nav-link" asp-controller="Home" asp-action="Multiplayer">
                                <i class="fas fa-users me-1"></i>Chơi Online
                            </a>
                        </li>
                        @if (User.IsInRole("Admin"))
                        {
                            <li class="nav-item dropdown">
                                <a class="nav-link dropdown-toggle" href="#" id="adminDropdown" role="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-cog me-1"></i>Admin
                                </a>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" asp-controller="Admin" asp-action="Index"><i class="fas fa-tachometer-alt me-2"></i>Dashboard</a></li>
                                    <li><a class="dropdown-item" asp-controller="Admin" asp-action="Users"><i class="fas fa-users me-2"></i>Quản lý người dùng</a></li>
                                    <li><a class="dropdown-item" asp-controller="Admin" asp-action="Statistics"><i class="fas fa-chart-bar me-2"></i>Thống kê</a></li>
                                    <li><a class="dropdown-item" asp-controller="Admin" asp-action="BanHistory"><i class="fas fa-history me-2"></i>Lịch sử cấm</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item" asp-controller="Database" asp-action="Index"><i class="fas fa-database me-2"></i>Quản lý DB</a></li>
                                </ul>
                            </li>
                        }
                    }
                </ul>
                
                <ul class="navbar-nav">
                    @if (SignInManager.IsSignedIn(User))
                    {
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown">
                                <i class="fas fa-user me-1"></i>@User.Identity?.Name
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" asp-controller="Home" asp-action="Index"><i class="fas fa-gamepad me-2"></i>Chơi với AI</a></li>
                                <li><a class="dropdown-item" asp-controller="Home" asp-action="Multiplayer"><i class="fas fa-users me-2"></i>Chơi Online</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <form asp-controller="Account" asp-action="Logout" method="post" style="display: inline;">
                                        <button type="submit" class="dropdown-item">
                                            <i class="fas fa-sign-out-alt me-2"></i>Đăng xuất
                                        </button>
                                    </form>
                                </li>
                            </ul>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link" asp-controller="Account" asp-action="Login">
                                <i class="fas fa-sign-in-alt me-1"></i>Đăng nhập
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-controller="Account" asp-action="Register">
                                <i class="fas fa-user-plus me-1"></i>Đăng ký
                            </a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>

    <main role="main">
        @if (IsSectionDefined("CaroBoard") || IsSectionDefined("PlayerInfo"))
        {
            <div class="main-content">
                <div class="caro-board-container">
                    @RenderSection("CaroBoard", required: false)
                </div>
                <div class="player-info">
                    @RenderSection("PlayerInfo", required: false)
                </div>
            </div>
        }
        else
        {
            @RenderBody()
        }
    </main>
    <footer class="footer">
        <div class="container text-center">
            <span class="text-muted">&copy; 2025 - Web_cờ_caro</span>
        </div>
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        console.log('=== LAYOUT SCRIPT LOADED ===');
        console.log('Testing if JavaScript works...');
        
        // Test global functions
        window.forceAIMove = function() {
            console.log('Force AI move called from layout');
            alert('Force AI works!');
        };
        
        window.testAI = function() {
            console.log('Test AI called from layout');
            alert('Test AI works!');
        };
        
        window.resetGame = function() {
            console.log('Reset game called from layout');
            alert('Reset game works!');
        };
        
        // AI difficulty levels
        let aiDifficulty = 'medium'; // 'medium', 'hard'
        
        window.setAILevel = function(level) {
            console.log('AI level changed to:', level);
            aiDifficulty = level;
            
            // Update UI
            const levelButtons = document.querySelectorAll('.ai-level-btn');
            levelButtons.forEach(btn => {
                btn.classList.remove('btn-primary');
                btn.classList.add('btn-outline-primary');
            });
            
            const currentLevelBtn = document.querySelector(`[data-level="${level}"]`);
            if (currentLevelBtn) {
                currentLevelBtn.classList.remove('btn-outline-primary');
                currentLevelBtn.classList.add('btn-primary');
            }
            
            alert(`AI đã chuyển sang mức độ: ${level === 'medium' ? 'Trung bình' : 'Khó'}`);
        };
        
        window.showGameRules = function() {
            console.log('Show rules called from layout');
            alert('Show rules works!');
        };

        // Hàm hiển thị modal thông báo chiến thắng mới
        function showVictoryModal(title, message, icon = '🏆') {
            const modal = document.getElementById('victoryModal');
            const modalTitle = document.getElementById('victoryTitle');
            const modalMessage = document.getElementById('victoryMessage');
            const modalIcon = document.getElementById('victoryIcon');
            
            modalTitle.textContent = title;
            modalMessage.textContent = message;
            modalIcon.textContent = icon;
            
            modal.classList.add('show');
        }

        // Hàm đóng modal thông báo chiến thắng mới
        function closeVictoryModal() {
            const modal = document.getElementById('victoryModal');
            modal.classList.remove('show');
        }

        // Đóng modal khi click bên ngoài
        document.addEventListener('click', function(event) {
            const modal = document.getElementById('victoryModal');
            if (event.target === modal) {
                closeVictoryModal();
            }
        });
        
        // ========================================
        // GAME LOGIC - ADDED TO LAYOUT
        // ========================================
        
        // Game variables
        let currentPlayer = 'X';
        const size = 20;
        let boardState = Array.from({ length: size }, () => Array(size).fill(null));
        let gameOver = false;
        
        // Game statistics
        let gameStats = {
            wins: 0,
            losses: 0,
            draws: 0
        };
        
        // Update status function
        function updateStatus() {
            const playerStatus = document.getElementById('player-status');
            const aiStatus = document.getElementById('ai-status');
            
            if (!playerStatus || !aiStatus) {
                console.log('Status elements not found');
                return;
            }
            
            if (currentPlayer === 'X') {
                playerStatus.textContent = 'Đang đánh...';
                playerStatus.classList.remove('text-secondary');
                playerStatus.classList.add('text-success');
                aiStatus.textContent = 'Đang chờ...';
                aiStatus.classList.remove('text-success');
                aiStatus.classList.add('text-secondary');
            } else {
                playerStatus.textContent = 'Đang chờ...';
                playerStatus.classList.remove('text-success');
                playerStatus.classList.add('text-secondary');
                aiStatus.textContent = 'Đang đánh...';
                aiStatus.classList.remove('text-secondary');
                aiStatus.classList.add('text-success');
            }
        }
        
        // Simple AI move function
        function makeAIMove() {
            console.log('AI is thinking...');
            
            if (gameOver || currentPlayer !== 'O') {
                console.log('AI cannot move - game over or not AI turn');
                return;
            }
            
            setTimeout(() => {
                const move = getAIMove();
                console.log('AI decided move:', move);
                
                if (move) {
                    const table = document.getElementById('caro-board');
                    if (!table) {
                        console.log('Table not found!');
                        return;
                    }
                    
                    const cell = table.rows[move.row].cells[move.col];
                    if (cell && cell.textContent === '') {
                        cell.innerHTML = '<span class="caro-o">O</span>';
                        boardState[move.row][move.col] = 'O';
                        console.log('AI placed O at:', move.row, move.col);
                        
                        if (checkWin(move.row, move.col, 'O')) {
                            setTimeout(() => {
                                showVictoryModal('AI thắng!', 'AI đã đánh bại bạn! Hãy thử lại!', '🤖');
                                gameStats.losses++;
                                saveStats();
                                updateStatsDisplay();
                            }, 100);
                            gameOver = true;
                            return;
                        }
                        
                        currentPlayer = 'X';
                        updateStatus();
                        console.log('AI turn completed');
                    }
                }
                
                // Kiểm tra hòa nếu không còn ô trống
                const emptyCells = [];
                for (let i = 0; i < size; i++) {
                    for (let j = 0; j < size; j++) {
                        if (boardState[i][j] === null) {
                            emptyCells.push({ row: i, col: j });
                        }
                    }
                }
                
                if (emptyCells.length === 0 && !gameOver) {
                    setTimeout(() => {
                        showVictoryModal('Hòa!', 'Trận đấu kết thúc hòa!', '👋');
                        gameStats.draws++;
                        saveStats();
                        updateStatsDisplay();
                    }, 100);
                    gameOver = true;
                }
            }, 1000);
        }
        
        // Get AI move - SMART VERSION
        function getAIMove() {
            console.log('Getting AI move with difficulty:', aiDifficulty);
            
            // Find all empty cells
            const emptyCells = [];
            for (let i = 0; i < size; i++) {
                for (let j = 0; j < size; j++) {
                    if (boardState[i][j] === null) {
                        emptyCells.push({ row: i, col: j });
                    }
                }
            }
            
            console.log('Empty cells found:', emptyCells.length);
            
            if (emptyCells.length === 0) {
                console.log('No empty cells!');
                return null;
            }
            
            // If first move, play center
            if (emptyCells.length === size * size) {
                const centerMove = { row: Math.floor(size / 2), col: Math.floor(size / 2) };
                console.log('First move - center:', centerMove);
                return centerMove;
            }
            
            // Priority 1: Win immediately
            for (const cell of emptyCells) {
                boardState[cell.row][cell.col] = 'O';
                if (checkWin(cell.row, cell.col, 'O')) {
                    boardState[cell.row][cell.col] = null;
                    console.log('AI found winning move:', cell);
                    return cell;
                }
                boardState[cell.row][cell.col] = null;
            }
            
            // Priority 2: Block player from winning
            for (const cell of emptyCells) {
                boardState[cell.row][cell.col] = 'X';
                if (checkWin(cell.row, cell.col, 'X')) {
                    boardState[cell.row][cell.col] = null;
                    console.log('AI blocking player win:', cell);
                    return cell;
                }
                boardState[cell.row][cell.col] = null;
            }
            
            // Priority 3: Create 4-in-a-row for AI
            for (const cell of emptyCells) {
                boardState[cell.row][cell.col] = 'O';
                if (countConsecutive(cell.row, cell.col, 0, 1, 'O') + countConsecutive(cell.row, cell.col, 0, -1, 'O') - 1 >= 4 ||
                    countConsecutive(cell.row, cell.col, 1, 0, 'O') + countConsecutive(cell.row, cell.col, -1, 0, 'O') - 1 >= 4 ||
                    countConsecutive(cell.row, cell.col, 1, 1, 'O') + countConsecutive(cell.row, cell.col, -1, -1, 'O') - 1 >= 4 ||
                    countConsecutive(cell.row, cell.col, 1, -1, 'O') + countConsecutive(cell.row, cell.col, -1, 1, 'O') - 1 >= 4) {
                    boardState[cell.row][cell.col] = null;
                    console.log('AI creating 4-in-a-row:', cell);
                    return cell;
                }
                boardState[cell.row][cell.col] = null;
            }
            
            // Priority 4: Block player's 3-in-a-row
            for (const cell of emptyCells) {
                boardState[cell.row][cell.col] = 'X';
                if (countConsecutive(cell.row, cell.col, 0, 1, 'X') + countConsecutive(cell.row, cell.col, 0, -1, 'X') - 1 >= 3 ||
                    countConsecutive(cell.row, cell.col, 1, 0, 'X') + countConsecutive(cell.row, cell.col, -1, 0, 'X') - 1 >= 3 ||
                    countConsecutive(cell.row, cell.col, 1, 1, 'X') + countConsecutive(cell.row, cell.col, -1, -1, 'X') - 1 >= 3 ||
                    countConsecutive(cell.row, cell.col, 1, -1, 'X') + countConsecutive(cell.row, cell.col, -1, 1, 'X') - 1 >= 3) {
                    boardState[cell.row][cell.col] = null;
                    console.log('AI blocking player 3-in-a-row:', cell);
                    return cell;
                }
                boardState[cell.row][cell.col] = null;
            }
            
            // Priority 5: Create 3-in-a-row for AI
            for (const cell of emptyCells) {
                boardState[cell.row][cell.col] = 'O';
                if (countConsecutive(cell.row, cell.col, 0, 1, 'O') + countConsecutive(cell.row, cell.col, 0, -1, 'O') - 1 >= 3 ||
                    countConsecutive(cell.row, cell.col, 1, 0, 'O') + countConsecutive(cell.row, cell.col, -1, 0, 'O') - 1 >= 3 ||
                    countConsecutive(cell.row, cell.col, 1, 1, 'O') + countConsecutive(cell.row, cell.col, -1, -1, 'O') - 1 >= 3 ||
                    countConsecutive(cell.row, cell.col, 1, -1, 'O') + countConsecutive(cell.row, cell.col, -1, 1, 'O') - 1 >= 3) {
                    boardState[cell.row][cell.col] = null;
                    console.log('AI creating 3-in-a-row:', cell);
                    return cell;
                }
                boardState[cell.row][cell.col] = null;
            }
            
            // Priority 6: Find cells near existing pieces (strategic positions)
            const movesWithNeighbors = [];
            for (const cell of emptyCells) {
                if (hasNeighbor(cell.row, cell.col)) {
                    movesWithNeighbors.push(cell);
                }
            }
            
            console.log('Strategic moves with neighbors:', movesWithNeighbors.length);
            
            if (movesWithNeighbors.length > 0) {
                // Choose the best strategic move
                const bestMove = findBestStrategicMove(movesWithNeighbors);
                console.log('AI selected strategic move:', bestMove);
                return bestMove;
            }
            
            // Priority 7: Random move from all empty cells
            const randomIndex = Math.floor(Math.random() * emptyCells.length);
            const selectedMove = emptyCells[randomIndex];
            console.log('AI selected random move:', selectedMove);
            return selectedMove;
        }
        
        // HARD AI: Advanced strategy with look-ahead
        if (aiDifficulty === 'hard') {
            // Enhanced strategy for hard AI - more aggressive blocking and better move selection
            console.log('Hard AI using advanced strategy');
            
            // For hard AI, prioritize blocking more aggressively and look deeper
            // The existing logic already includes sophisticated blocking and strategic moves
            // Hard AI will use the same logic but with better move selection
        }
        
        // Find best strategic move
        function findBestStrategicMove(moves) {
            let bestMove = moves[0];
            let bestScore = -1;
            
            for (const move of moves) {
                let score = 0;
                
                // Check all 8 directions for potential
                const directions = [
                    [0, 1], [0, -1], [1, 0], [-1, 0], // horizontal, vertical
                    [1, 1], [-1, -1], [1, -1], [-1, 1] // diagonal
                ];
                
                for (const [dRow, dCol] of directions) {
                    // Count AI pieces in this direction
                    let aiCount = 0;
                    let spaceCount = 0;
                    
                    for (let i = 1; i <= 4; i++) {
                        const r = move.row + dRow * i;
                        const c = move.col + dCol * i;
                        
                        if (r >= 0 && r < size && c >= 0 && c < size) {
                            if (boardState[r][c] === 'O') aiCount++;
                            else if (boardState[r][c] === null) spaceCount++;
                        }
                    }
                    
                    // Count in opposite direction
                    for (let i = 1; i <= 4; i++) {
                        const r = move.row - dRow * i;
                        const c = move.col - dCol * i;
                        
                        if (r >= 0 && r < size && c >= 0 && c < size) {
                            if (boardState[r][c] === 'O') aiCount++;
                            else if (boardState[r][c] === null) spaceCount++;
                        }
                    }
                    
                    // Score based on AI pieces and available space
                    if (aiCount >= 2 && spaceCount >= 2) {
                        score += aiCount * 10;
                    }
                }
                
                if (score > bestScore) {
                    bestScore = score;
                    bestMove = move;
                }
            }
            
            return bestMove;
        }
        
        // Check if cell has neighbors
        function hasNeighbor(row, col) {
            for (let i = Math.max(0, row - 2); i <= Math.min(size - 1, row + 2); i++) {
                for (let j = Math.max(0, col - 2); j <= Math.min(size - 1, col + 2); j++) {
                    if (boardState[i][j] !== null) return true;
                }
            }
            return false;
        }
        
        // Load statistics from localStorage
        function loadStats() {
            try {
                const saved = localStorage.getItem('caroStats');
                if (saved) {
                    gameStats = JSON.parse(saved);
                }
                updateStatsDisplay();
            } catch (error) {
                console.log('Error loading stats:', error);
            }
        }
        
        // Save statistics to localStorage
        function saveStats() {
            try {
                localStorage.setItem('caroStats', JSON.stringify(gameStats));
            } catch (error) {
                console.log('Error saving stats:', error);
            }
        }
        
        // Update statistics display
        function updateStatsDisplay() {
            const winsElement = document.getElementById('wins');
            const lossesElement = document.getElementById('losses');
            const drawsElement = document.getElementById('draws');
            
            if (winsElement) winsElement.textContent = gameStats.wins;
            if (lossesElement) lossesElement.textContent = gameStats.losses;
            if (drawsElement) drawsElement.textContent = gameStats.draws;
        }
        
        // Check for win
        function checkWin(row, col, player) {
            return (
                countConsecutive(row, col, 0, 1, player) + countConsecutive(row, col, 0, -1, player) - 1 >= 5 ||
                countConsecutive(row, col, 1, 0, player) + countConsecutive(row, col, -1, 0, player) - 1 >= 5 ||
                countConsecutive(row, col, 1, 1, player) + countConsecutive(row, col, -1, -1, player) - 1 >= 5 ||
                countConsecutive(row, col, 1, -1, player) + countConsecutive(row, col, -1, 1, player) - 1 >= 5
            );
        }
        
        // Count consecutive pieces
        function countConsecutive(row, col, dRow, dCol, player) {
            let count = 0;
            let r = row, c = col;
            while (r >= 0 && r < size && c >= 0 && c < size && boardState[r][c] === player) {
                count++;
                r += dRow;
                c += dCol;
            }
            return count;
        }
        
        // Override forceAIMove to use local functions
        window.forceAIMove = function() {
            console.log('Force AI move called from layout');
            if (!gameOver) {
                currentPlayer = 'O';
                updateStatus();
                makeAIMove();
            }
        };
        
        // Override testAI to use local functions
        window.testAI = function() {
            console.log('Test AI called from layout');
            if (currentPlayer === 'O' && !gameOver) {
                makeAIMove();
            } else {
                alert('Không thể test AI - không phải lượt AI hoặc game đã kết thúc');
            }
        };
        
        // Override resetGame to use local functions
        window.resetGame = function() {
            console.log('Reset game called from layout');
            boardState = Array.from({ length: size }, () => Array(size).fill(null));
            currentPlayer = 'X';
            gameOver = false;
            
            const cells = document.querySelectorAll('#caro-board td');
            cells.forEach(cell => {
                cell.innerHTML = '';
            });
            
            updateStatus();
            loadStats();
        };
        
        // Override showGameRules
        window.showGameRules = function() {
            console.log('Show rules called from layout');
            alert('Luật chơi Cờ Caro:\n\n- Người chơi đánh X (màu đỏ)\n- AI đánh O (màu xanh)\n- Đặt 5 quân cờ liên tiếp để thắng\n- Có thể đánh ngang, dọc hoặc chéo\n- Bàn cờ 20x20 ô');
        };
        
        // Initialize AI board (Index) when DOM is loaded and board exists
        document.addEventListener('DOMContentLoaded', function () {
            console.log('=== GAME INITIALIZATION START ===');
            
            const board = document.getElementById('caro-board');
            if (!board) {
                console.log('ERROR: Board not found!');
                return;
            }
            
            console.log('Board found, setting up game...');
            
            // Load statistics and update status
            loadStats();
            updateStatus();
            
            // Ensure fixed-size black grid styling for AI board
            board.classList.add('caro-table');

            // Add click event listener to board
            board.addEventListener('click', function (e) {
                console.log('Board clicked:', e.target);
                
                if (gameOver) {
                    console.log('Game is over, click ignored');
                    return;
                }
                
                if (currentPlayer !== 'X') {
                    console.log('Not player turn, click ignored');
                    return;
                }
                
                if (e.target.tagName === 'TD' && e.target.textContent === '') {
                    console.log('Player clicked on empty cell');
                    
                    const cell = e.target;
                    const row = cell.parentNode.rowIndex;
                    const col = cell.cellIndex;
                    
                    console.log('Cell position:', row, col);
                    
                    // Place player's move
                    cell.innerHTML = '<span class="caro-x">X</span>';
                    boardState[row][col] = 'X';
                    
                    console.log('Player placed X at:', row, col);
                    
                    // Check for win
                    if (checkWin(row, col, 'X')) {
                        setTimeout(() => {
                            showVictoryModal('Bạn thắng!', 'Chúc mừng! Bạn đã đánh bại AI!', '🏆');
                            gameStats.wins++;
                            saveStats();
                            updateStatsDisplay();
                        }, 100);
                        gameOver = true;
                        return;
                    }
                    
                    // Switch to AI turn
                    currentPlayer = 'O';
                    updateStatus();
                    console.log('Switching to AI turn');
                    
                    // Kiểm tra hòa sau khi người chơi đánh
                    const emptyCellsAfterPlayer = [];
                    for (let i = 0; i < size; i++) {
                        for (let j = 0; j < size; j++) {
                            if (boardState[i][j] === null) {
                                emptyCellsAfterPlayer.push({ row: i, col: j });
                            }
                        }
                    }
                    
                    if (emptyCellsAfterPlayer.length === 0) {
                        setTimeout(() => {
                            showVictoryModal('Hòa!', 'Trận đấu kết thúc hòa!', '👋');
                            gameStats.draws++;
                            saveStats();
                            updateStatsDisplay();
                        }, 100);
                        gameOver = true;
                        return;
                    }
                    
                    // Make AI move
                    makeAIMove();
                }
            });
            
            console.log('=== GAME INITIALIZATION COMPLETED ===');
        });
        
        console.log('=== LAYOUT SCRIPT COMPLETED ===');
    </script>
    <script src="~/js/site.js"></script>
    <style>
        /* Shared fixed-size black grid for both AI and Multiplayer boards */
        .caro-table {
            border-collapse: collapse;
            table-layout: fixed;
            width: auto;
            margin: 0 auto;
            background: #fffbe6;
        }
        .caro-table td {
            width: 35px;
            height: 35px;
            text-align: center;
            vertical-align: middle;
            font-size: 22px;
            cursor: pointer;
            background: #f7e9c4;
            border: 1px solid #000;
            transition: background-color 0.2s ease;
        }
        .caro-table td:hover {
            background-color: #e6d7a3 !important;
        }
    </style>
    @RenderSection("Scripts", required: false)
</body>
</html>
